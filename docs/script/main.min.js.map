{"version":3,"file":"main.min.js","mappings":"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","sources":["webpack://stereogram-webgl/./src/ts/engine.ts","webpack://stereogram-webgl/./src/ts/gl-utils/gl-canvas.ts","webpack://stereogram-webgl/./src/ts/gl-utils/gl-resource.ts","webpack://stereogram-webgl/./src/ts/gl-utils/shader-manager.ts","webpack://stereogram-webgl/./src/ts/gl-utils/shader-sources.ts","webpack://stereogram-webgl/./src/ts/gl-utils/shader.ts","webpack://stereogram-webgl/./src/ts/gl-utils/vbo.ts","webpack://stereogram-webgl/./src/ts/heightmap.ts","webpack://stereogram-webgl/./src/ts/loader.ts","webpack://stereogram-webgl/./src/ts/main.ts","webpack://stereogram-webgl/./src/ts/obj-model.ts","webpack://stereogram-webgl/./src/ts/parameters.ts","webpack://stereogram-webgl/./src/ts/scene.ts","webpack://stereogram-webgl/./src/ts/stereogram-shader.ts","webpack://stereogram-webgl/./src/ts/texture/image-texture.ts","webpack://stereogram-webgl/./src/ts/texture/render-to-texture-with-depth.ts","webpack://stereogram-webgl/./src/ts/texture/render-to-texture.ts","webpack://stereogram-webgl/./src/ts/tile.ts","webpack://stereogram-webgl/./src/ts/utils.ts","webpack://stereogram-webgl/webpack/bootstrap","webpack://stereogram-webgl/webpack/startup"],"sourcesContent":["import { gl } from \"./gl-utils/gl-canvas\";\r\nimport { Shader } from \"./gl-utils/shader\";\r\nimport { VBO } from \"./gl-utils/vbo\";\r\n\r\nimport { Heightmap } from \"./heightmap\";\r\nimport { EStripesMode, ETileMode, Parameters } from \"./parameters\";\r\nimport * as StereogramShader from \"./stereogram-shader\";\r\nimport { Tile } from \"./tile\";\r\nimport { asyncLoadShader, clamp } from \"./utils\";\r\n\r\n\r\nclass Engine {\r\n    private static readonly MIN_STRIPES_COUNT: number = 8;\r\n    private static readonly MAX_STRIPES_COUNT: number = 24;\r\n\r\n    private readonly fullscreenVBO: VBO;\r\n\r\n    private heightmapShader: Shader;\r\n\r\n    public stripesCount: number;\r\n\r\n    public constructor() {\r\n        this.fullscreenVBO = VBO.createQuad(gl, -1, -1, 1, 1);\r\n\r\n        asyncLoadShader(\"heightmap\", \"fullscreen.vert\", \"heightmap.frag\", (shader: Shader) => {\r\n            this.heightmapShader = shader;\r\n        });\r\n    }\r\n\r\n    public draw(heightmap: Heightmap, tile: Tile): boolean {\r\n        const currentTile = tile.current;\r\n        const heightmapTexture = heightmap.current;\r\n\r\n        this.stripesCount = this.computeIdealStripeCount();\r\n        const usefulStripesProportion = this.stripesCount / (this.stripesCount + 1);\r\n        let heightmapHScaling = 1;\r\n\r\n        let shader: Shader;\r\n        if (Parameters.showHeightmap) {\r\n            shader = this.heightmapShader;\r\n            heightmapHScaling = usefulStripesProportion;\r\n        } else {\r\n            shader = StereogramShader.getShader(this.stripesCount);\r\n\r\n            if (shader) {\r\n                const tileUsefulWidth = currentTile.texture.width - 2 * currentTile.padding;\r\n                const tileUsefulHeight = currentTile.texture.height - 2 * currentTile.padding;\r\n\r\n                const tileWidthInPixel = gl.canvas.width / (this.stripesCount + 1);\r\n                const tileHeightInPixel = tileWidthInPixel / (tileUsefulWidth / tileUsefulHeight);\r\n                const tileHeight = tileHeightInPixel / gl.canvas.height;\r\n\r\n                shader.u[\"uTileTexture\"].value = currentTile.texture.id;\r\n                shader.u[\"uTileColor\"].value = (Parameters.tileMode === ETileMode.NOISE && !Parameters.noiseTileColored) ? 0 : 1;\r\n                shader.u[\"uTileHeight\"].value = tileHeight;\r\n                shader.u[\"uTileScaling\"].value = [tileUsefulWidth / currentTile.texture.width, tileUsefulHeight / currentTile.texture.height];\r\n                shader.u[\"uShowUV\"].value = Parameters.showUV ? 1 : 0;\r\n            }\r\n        }\r\n\r\n        if (shader) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // tslint:disable-line:no-bitwise\r\n\r\n            shader.a[\"aCorner\"].VBO = this.fullscreenVBO;\r\n            shader.u[\"uHeightmapTexture\"].value = heightmapTexture.id;\r\n            shader.u[\"uInvertHeightmap\"].value = Parameters.invertHeightmap;\r\n            shader.u[\"uDepthFactor\"].value = Parameters.depth;\r\n\r\n            const canvasAspectRatio = (gl.canvas.width * usefulStripesProportion) / gl.canvas.height;\r\n            const heightmapAspectRatio = heightmapTexture.width / heightmapTexture.height;\r\n            if (canvasAspectRatio > heightmapAspectRatio) {\r\n                shader.u[\"uHeightmapScaling\"].value = [canvasAspectRatio / heightmapAspectRatio / heightmapHScaling, 1];\r\n            } else {\r\n                shader.u[\"uHeightmapScaling\"].value = [1 / heightmapHScaling, heightmapAspectRatio / canvasAspectRatio];\r\n            }\r\n\r\n            shader.use();\r\n            shader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private computeIdealStripeCount(): number {\r\n        if (Parameters.stripesMode === EStripesMode.ADAPTATIVE) {\r\n            const idealCount = Math.round(gl.canvas.width / Parameters.stripesWidth);\r\n            return clamp(Engine.MIN_STRIPES_COUNT, Engine.MAX_STRIPES_COUNT, idealCount);\r\n        } else {\r\n            return Parameters.stripesCount;\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Engine,\r\n};\r\n\r\n","import \"../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\(([^)]*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","type LoadCallback = (success: boolean) => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        let url = \"./shaders/\" + filename;\r\n        if (typeof Page.version !== \"undefined\") {\r\n            url += `?v=${Page.version}`;\r\n        }\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                console.log(source);\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","import { GLResource } from \"./gl-resource\";\r\n\r\nenum Usage {\r\n    DYNAMIC,\r\n    STATIC,\r\n}\r\n\r\nclass VBO extends GLResource {\r\n    public static createQuad(gl: WebGLRenderingContext, minX: number, minY: number, maxX: number, maxY: number): VBO {\r\n        const vert = [\r\n            minX, minY,\r\n            maxX, minY,\r\n            minX, maxY,\r\n            maxX, maxY,\r\n        ];\r\n\r\n        return new VBO(gl, new Float32Array(vert), 2, gl.FLOAT, true);\r\n    }\r\n\r\n    private id: WebGLBuffer;\r\n    private size: number;\r\n    private type: GLenum;\r\n    private normalize: GLboolean;\r\n    private stride: GLsizei;\r\n    private offset: GLintptr;\r\n    private usage: Usage;\r\n\r\n    constructor(gl: WebGLRenderingContext, array: any, size: number, type: GLenum, staticUsage: boolean = true) {\r\n        super(gl);\r\n\r\n        this.id = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (staticUsage) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.size = size;\r\n        this.type = type;\r\n        this.normalize = false;\r\n        this.stride = 0;\r\n        this.offset = 0;\r\n        this.usage = (staticUsage) ? Usage.STATIC : Usage.DYNAMIC;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        this.gl().deleteBuffer(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public bind(location: GLuint): void {\r\n        const gl = super.gl();\r\n        gl.enableVertexAttribArray(location);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n    }\r\n\r\n    public setData(array: any): void {\r\n        const gl = super.gl();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (this.usage === Usage.STATIC) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n}\r\n\r\nexport { VBO };\r\n","import { gl } from \"./gl-utils/gl-canvas\";\r\n\r\nimport { EHeightmapMode, Parameters } from \"./parameters\";\r\nimport { Scene } from \"./scene\";\r\nimport { ITexture } from \"./texture/i-texture\";\r\nimport { ImageTexture } from \"./texture/image-texture\";\r\n\r\n\r\nclass Heightmap {\r\n    private readonly heightmapTexture: ImageTexture;\r\n\r\n    private readonly scene: Scene;\r\n\r\n    public constructor() {\r\n        this.heightmapTexture = new ImageTexture();\r\n\r\n        this.scene = new Scene();\r\n\r\n        Parameters.heightmapChangeObservers.push((image: HTMLImageElement) => {\r\n            this.heightmapTexture.uploadToGPU(image);\r\n        });\r\n    }\r\n\r\n    public get current(): ITexture {\r\n        if (Parameters.heightmapMode === EHeightmapMode.MOVING) {\r\n            this.scene.computeDepthMap(gl.canvas.width, gl.canvas.height);\r\n            return this.scene.depthMap;\r\n        } else {\r\n            return this.heightmapTexture;\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Heightmap,\r\n};\r\n\r\n","import \"./page-interface-generated\";\r\n\r\n\r\nconst loadingObjects: { [id: string]: boolean } = {};\r\n\r\nfunction registerLoadingObject(id: string): void {\r\n    if (Object.keys(loadingObjects).length === 0) {\r\n        Page.Canvas.showLoader(true);\r\n    }\r\n    loadingObjects[id] = false;\r\n}\r\n\r\nfunction registerLoadedObject(id: string): void {\r\n    delete loadingObjects[id];\r\n\r\n    if (Object.keys(loadingObjects).length === 0) {\r\n        Page.Canvas.showLoader(false);\r\n    }\r\n}\r\n\r\nexport {\r\n    registerLoadedObject,\r\n    registerLoadingObject,\r\n};\r\n\r\n","import * as GLCanvas from \"./gl-utils/gl-canvas\";\r\nimport { gl } from \"./gl-utils/gl-canvas\";\r\n\r\nimport { Engine } from \"./engine\";\r\nimport { Heightmap } from \"./heightmap\";\r\nimport { EHeightmapMode, ETileMode, Parameters } from \"./parameters\";\r\nimport { Tile } from \"./tile\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\nfunction main(): void {\r\n    const webglFlags = {\r\n        alpha: false,\r\n        antialias: false,\r\n        depth: false,\r\n        stencil: false,\r\n        preserveDrawingBuffer: false,\r\n    };\r\n    if (!GLCanvas.initGL(webglFlags)) {\r\n        return;\r\n    }\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.BLEND);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.disable(gl.STENCIL_TEST);\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    const engine = new Engine();\r\n    const heightmap = new Heightmap();\r\n    const tile = new Tile();\r\n\r\n    let nbFramesSinceLastUpdate = 0;\r\n    setInterval(() => {\r\n        Page.Canvas.setIndicatorText(\"fps-indicator\", Math.round(nbFramesSinceLastUpdate).toFixed(0));\r\n        nbFramesSinceLastUpdate = 0;\r\n\r\n        const currentTile = tile.current.texture;\r\n        Page.Canvas.setIndicatorText(\"tilesize-indicator\", `${currentTile.width}x${currentTile.height}`);\r\n\r\n        Page.Canvas.setIndicatorText(\"stripes-count-indicator\", engine.stripesCount.toFixed(0));\r\n    }, 1000);\r\n\r\n    let needToDownload = false;\r\n    Parameters.imageDownloadObservers.push(() => { needToDownload = true; });\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => { needToRedraw = true; });\r\n\r\n    let needToRecomputeNoiseTile = true;\r\n    Parameters.recomputeNoiseTileObservers.push(() => { needToRecomputeNoiseTile = true; });\r\n\r\n    function mainLoop(): void {\r\n        nbFramesSinceLastUpdate++;\r\n\r\n        if (needToDownload) {\r\n            // redraw before resizing the canvas because the download pane might open, which changes the canvas size\r\n            engine.draw(heightmap, tile); // redraw because preserveDrawingBuffer is false\r\n            download(canvas);\r\n            needToDownload = false;\r\n        }\r\n\r\n        if (Parameters.heightmapMode === EHeightmapMode.MOVING) {\r\n            needToRecomputeNoiseTile = true;\r\n            needToRedraw = true;\r\n        }\r\n\r\n        if (needToRecomputeNoiseTile && Parameters.tileMode === ETileMode.NOISE) {\r\n            const width = Parameters.noiseTileResolution;\r\n            const height = Parameters.noiseTileSquare ? width : 5 * width;\r\n            needToRecomputeNoiseTile = !tile.randomize(width, height);\r\n        }\r\n\r\n        if (needToRedraw) {\r\n            GLCanvas.adjustSize(false);\r\n            needToRedraw = !engine.draw(heightmap, tile);\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    mainLoop();\r\n}\r\n\r\nfunction download(canvas: HTMLCanvasElement): void {\r\n    const name = \"stereogram.png\";\r\n\r\n    if ((canvas as any).msToBlob) { // for IE\r\n        const blob = (canvas as any).msToBlob();\r\n        (window.navigator as any).msSaveBlob(blob, name);\r\n    } else {\r\n        canvas.toBlob((blob: Blob) => {\r\n            const link = document.createElement(\"a\");\r\n            link.download = name;\r\n            link.href = URL.createObjectURL(blob);\r\n            link.click();\r\n        });\r\n    }\r\n}\r\n\r\nmain();\r\n","import { gl } from \"./gl-utils/gl-canvas\";\r\nimport { VBO } from \"./gl-utils/vbo\";\r\nimport * as Loader from \"./loader\";\r\n\r\n\r\ninterface IPoint {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n}\r\n\r\nclass ObjModel {\r\n    public readonly trianglesCount: number;\r\n    public readonly data: Float32Array;\r\n    public readonly VBO: VBO;\r\n\r\n    public static parse(input: string): ObjModel {\r\n        const lines = input.split(\"\\n\");\r\n\r\n        const vertices: IPoint[] = [];\r\n        const geometry: number[] = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i].trim();\r\n            const lineItems = line.split(/\\s+/);\r\n            const command = lineItems[0];\r\n\r\n            if (command === \"v\") { // declare vertex\r\n                if (lineItems.length >= 4) {\r\n                    vertices.push({\r\n                        x: parseFloat(lineItems[1]),\r\n                        y: parseFloat(lineItems[2]),\r\n                        z: parseFloat(lineItems[3]),\r\n                    });\r\n                } else {\r\n                    console.log(`Ignoring line ${i} because it does not have enough items: '${line}'.`);\r\n                    continue;\r\n                }\r\n            } else if (command === \"f\") { // declare face\r\n                if (lineItems.length >= 4) {\r\n                    // faces with more that 3 vertices are interpreted as TRIANGLE_FAN\r\n                    for (let iV = 3; iV < lineItems.length; iV++) {\r\n                        const indices: number[] = [\r\n                            +(lineItems[1].split(\"/\")[0]),\r\n                            +(lineItems[iV - 1].split(\"/\")[0]),\r\n                            +(lineItems[iV].split(\"/\")[0]),\r\n                        ];\r\n\r\n                        for (const indice of indices) {\r\n                            if (indice < 1 || indice > vertices.length) {\r\n                                console.log(`Ignoring line ${i} because vertex index ${indice} is out of range: '${line}'.`);\r\n                                continue;\r\n                            }\r\n                        }\r\n\r\n                        geometry.push(vertices[indices[0] - 1].x);\r\n                        geometry.push(vertices[indices[0] - 1].y);\r\n                        geometry.push(vertices[indices[0] - 1].z);\r\n                        geometry.push(vertices[indices[1] - 1].x);\r\n                        geometry.push(vertices[indices[1] - 1].y);\r\n                        geometry.push(vertices[indices[1] - 1].z);\r\n                        geometry.push(vertices[indices[2] - 1].x);\r\n                        geometry.push(vertices[indices[2] - 1].y);\r\n                        geometry.push(vertices[indices[2] - 1].z);\r\n                    }\r\n                } else {\r\n                    console.log(`Ignoring line ${i} because only triangular faces are supported: '${line}'.`);\r\n                    continue;\r\n                }\r\n            } else {\r\n                console.log(`Ignoring line ${i}: '${line}'.`);\r\n                continue;\r\n            }\r\n        }\r\n\r\n        return new ObjModel(new Float32Array(geometry));\r\n    }\r\n\r\n    public constructor(data: Float32Array) {\r\n        if (data.length % 9 !== 0) {\r\n            throw new Error(`Invalid data: ${data.length}`);\r\n        }\r\n\r\n        this.data = data;\r\n        this.trianglesCount = data.length / 9;\r\n\r\n        this.VBO = new VBO(gl, this.data, 3, gl.FLOAT, true);\r\n    }\r\n}\r\n\r\nconst modelsCache: { [name: string]: ObjModel } = {};\r\n\r\nfunction asyncLoadObjModel(name: string, callback: (model: ObjModel) => unknown): void {\r\n    if (typeof modelsCache[name] !== \"undefined\") {\r\n        callback(modelsCache[name]);\r\n    } else {\r\n        const id = `model-${name}`;\r\n        Loader.registerLoadingObject(id);\r\n\r\n        const request = new XMLHttpRequest();\r\n        request.addEventListener(\"load\", () => {\r\n            Loader.registerLoadedObject(id);\r\n\r\n            if (request.status === 200) {\r\n                if (typeof modelsCache[name] === \"undefined\") { // maybe it was loaded in the meantime\r\n                    modelsCache[name] = ObjModel.parse(request.responseText);\r\n                }\r\n            }\r\n\r\n            callback(modelsCache[name] ?? null);\r\n        });\r\n        request.open(\"GET\", `resources/models/${name}?v=${Page.version}`);\r\n        request.send();\r\n    }\r\n}\r\n\r\nexport {\r\n    asyncLoadObjModel,\r\n    ObjModel,\r\n};\r\n\r\n","import * as Loader from \"./loader\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    TILE_MODE_TABS: \"tile-mode-tabs-id\",\r\n    TILE_PRESET_SELECT: \"tile-preset-select-id\",\r\n    TILE_NOISE_RESOLUTION: \"tile-noise-resolution-range-id\",\r\n    TILE_NOISE_SQUARE: \"tile-noise-square-checkbox-id\",\r\n    TILE_NOISE_COLORED: \"tile-noise-colored-checkbox-id\",\r\n    SHOW_UV: \"show-uv-checkbox-id\",\r\n    TILE_UPLOAD_BUTTON: \"input-tile-upload-button\",\r\n\r\n    HEIGHTMAP_MODE_TABS: \"heightmap-mode-tabs-id\",\r\n    HEIGHTMAP_PRESET_SELECT: \"heightmap-preset-select-id\",\r\n    MODEL_PRESET_SELECT: \"model-preset-select-id\",\r\n    DEPTH_RANGE: \"depth-range-id\",\r\n    HEIGHTMAP_INVERT_CHECKBOX: \"invert-heightmap-checkbox-id\",\r\n    SHOW_HEIGHTMAP: \"show-heightmap-checkbox-id\",\r\n    HEIGHTMAP_UPLOAD_BUTTON: \"input-heightmap-upload-button\",\r\n\r\n    STRIPES_MODE_TABS: \"stripes-mode-tabs-id\",\r\n    STRIPES_WIDTH_RANGE: \"stripes-width-range-id\",\r\n    STRIPES_COUNT_RANGE: \"stripes-count-range-id\",\r\n\r\n    SHOW_INDICATORS_CHECKBOX: \"show-indicators-checkbox-id\",\r\n    IMAGE_DOWNLOAD: \"image-download-id\",\r\n};\r\n\r\ntype Observer = () => unknown;\r\ntype ImageUploadObserver = (image: HTMLImageElement) => unknown;\r\n\r\nfunction callObservers(observers: Observer[]): void {\r\n    for (const observer of observers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nfunction callRedrawObservers(): void {\r\n    callObservers(Parameters.redrawObservers);\r\n}\r\n\r\nfunction callRecomputeNoiseTileObservers(): void {\r\n    callObservers(Parameters.recomputeNoiseTileObservers);\r\n    callRedrawObservers();\r\n}\r\n\r\nenum ETileMode {\r\n    TEXTURE = \"texture\",\r\n    NOISE = \"noise\",\r\n}\r\n\r\nenum EHeightmapMode {\r\n    STILL = \"still\",\r\n    MOVING = \"moving\",\r\n}\r\n\r\nenum EStripesMode {\r\n    ADAPTATIVE = \"adaptative\",\r\n    FIXED = \"fixed\",\r\n}\r\n\r\nabstract class Parameters {\r\n    public static readonly tileChangeObservers: ImageUploadObserver[] = [];\r\n    public static readonly heightmapChangeObservers: ImageUploadObserver[] = [];\r\n\r\n    public static readonly redrawObservers: Observer[] = [];\r\n    public static readonly recomputeNoiseTileObservers: Observer[] = [];\r\n\r\n    public static readonly imageDownloadObservers: Observer[] = [];\r\n\r\n    public static get tileMode(): ETileMode {\r\n        return Page.Tabs.getValues(controlId.TILE_MODE_TABS)[0] as ETileMode;\r\n    }\r\n    public static get noiseTileResolution(): number {\r\n        return Page.Range.getValue(controlId.TILE_NOISE_RESOLUTION);\r\n    }\r\n    public static get noiseTileSquare(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.TILE_NOISE_SQUARE);\r\n    }\r\n    public static get noiseTileColored(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.TILE_NOISE_COLORED);\r\n    }\r\n    public static get showUV(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_UV);\r\n    }\r\n\r\n    public static get heightmapMode(): EHeightmapMode {\r\n        return Page.Tabs.getValues(controlId.HEIGHTMAP_MODE_TABS)[0] as EHeightmapMode;\r\n    }\r\n    public static get modelId(): string {\r\n        return Page.Select.getValue(controlId.MODEL_PRESET_SELECT);\r\n    }\r\n    public static get depth(): number {\r\n        return Page.Range.getValue(controlId.DEPTH_RANGE);\r\n    }\r\n    public static get invertHeightmap(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.HEIGHTMAP_INVERT_CHECKBOX);\r\n    }\r\n    public static get showHeightmap(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_HEIGHTMAP);\r\n    }\r\n\r\n    public static get stripesMode(): EStripesMode {\r\n        return Page.Tabs.getValues(controlId.STRIPES_MODE_TABS)[0] as EStripesMode;\r\n    }\r\n    public static get stripesCount(): number {\r\n        return Page.Range.getValue(controlId.STRIPES_COUNT_RANGE);\r\n    }\r\n    public static get stripesWidth(): number {\r\n        return Page.Range.getValue(controlId.STRIPES_WIDTH_RANGE);\r\n    }\r\n}\r\n\r\nfunction parseImageUpload(filesList: FileList, callback: (uploadedImage: HTMLImageElement) => unknown): void {\r\n    if (filesList.length === 1) {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            const image = new Image();\r\n            image.addEventListener(\"load\", () => {\r\n                callback(image);\r\n            });\r\n            image.src = reader.result as string;\r\n        };\r\n        reader.readAsDataURL(filesList[0]);\r\n    }\r\n}\r\n\r\nfunction loadImage(url: string, callback: (loadedImage: HTMLImageElement) => unknown): void {\r\n    url += `?v=${Page.version}`;\r\n\r\n    Loader.registerLoadingObject(url);\r\n\r\n    const image = new Image();\r\n    image.addEventListener(\"load\", () => {\r\n        Loader.registerLoadedObject(url);\r\n        callback(image);\r\n    });\r\n    image.src = url;\r\n}\r\n\r\nfunction updateControlsVisibility(): void {\r\n    const isTileNoiseMode = (Parameters.tileMode === ETileMode.NOISE);\r\n    Page.Controls.setVisibility(controlId.TILE_NOISE_RESOLUTION, isTileNoiseMode);\r\n    Page.Controls.setVisibility(controlId.TILE_NOISE_COLORED, isTileNoiseMode);\r\n    Page.Controls.setVisibility(controlId.TILE_NOISE_SQUARE, isTileNoiseMode);\r\n    Page.Controls.setVisibility(controlId.TILE_PRESET_SELECT, !isTileNoiseMode);\r\n    Page.Controls.setVisibility(controlId.TILE_UPLOAD_BUTTON, !isTileNoiseMode);\r\n\r\n    const isMovingMode = (Parameters.heightmapMode === EHeightmapMode.MOVING);\r\n    Page.Controls.setVisibility(controlId.HEIGHTMAP_PRESET_SELECT, !isMovingMode);\r\n    Page.Controls.setVisibility(controlId.HEIGHTMAP_UPLOAD_BUTTON, !isMovingMode);\r\n    Page.Controls.setVisibility(controlId.MODEL_PRESET_SELECT, isMovingMode);\r\n}\r\n\r\n\r\nPage.Canvas.Observers.canvasResize.push(callRedrawObservers);\r\nPage.Checkbox.addObserver(controlId.SHOW_HEIGHTMAP, callRedrawObservers);\r\nPage.Range.addObserver(controlId.DEPTH_RANGE, callRedrawObservers);\r\nPage.Checkbox.addObserver(controlId.HEIGHTMAP_INVERT_CHECKBOX, callRedrawObservers);\r\nPage.Tabs.addObserver(controlId.HEIGHTMAP_MODE_TABS, () => {\r\n    if (Parameters.heightmapMode === EHeightmapMode.MOVING) {\r\n        Page.Tabs.setValues(controlId.TILE_MODE_TABS, [ETileMode.NOISE]);\r\n        Page.Tabs.clearStoredState(controlId.TILE_MODE_TABS);\r\n    }\r\n\r\n    updateControlsVisibility();\r\n    callRedrawObservers();\r\n});\r\n{\r\n    const onNewHeightmapTexture = (onlyIfPresetIs: string | null, image: HTMLImageElement) => {\r\n        const preset = Page.Select.getValue(controlId.HEIGHTMAP_PRESET_SELECT);\r\n        if (preset === onlyIfPresetIs) { // this method is call asynchronously, so check that the current preset is still the same\r\n            for (const observer of Parameters.heightmapChangeObservers) {\r\n                observer(image);\r\n            }\r\n            callRedrawObservers();\r\n        }\r\n    };\r\n\r\n    Page.FileControl.addUploadObserver(controlId.HEIGHTMAP_UPLOAD_BUTTON, (filesList: FileList) => {\r\n        Page.Select.setValue(controlId.HEIGHTMAP_PRESET_SELECT, null);\r\n        parseImageUpload(filesList, onNewHeightmapTexture.bind(null, null));\r\n    });\r\n\r\n    const onHeightmapPresetChange = () => {\r\n        const preset = Page.Select.getValue(controlId.HEIGHTMAP_PRESET_SELECT);\r\n        if (preset) {\r\n            Page.FileControl.clearFileUpload(controlId.HEIGHTMAP_UPLOAD_BUTTON);\r\n            loadImage(`resources/heightmaps/${preset}`, onNewHeightmapTexture.bind(null, preset));\r\n        }\r\n    };\r\n    Page.Select.addObserver(controlId.HEIGHTMAP_PRESET_SELECT, onHeightmapPresetChange);\r\n    onHeightmapPresetChange();\r\n}\r\n\r\n\r\nPage.Checkbox.addObserver(controlId.SHOW_UV, callRedrawObservers);\r\nPage.Tabs.addObserver(controlId.TILE_MODE_TABS, () => {\r\n    updateControlsVisibility();\r\n    callRedrawObservers();\r\n});\r\n{\r\n    const onNewTileTexture = (onlyIfPresetIs: string | null, image: HTMLImageElement) => {\r\n        const preset = Page.Select.getValue(controlId.TILE_PRESET_SELECT);\r\n        if (preset === onlyIfPresetIs) { // this method is call asynchronously, so check that the current preset is still the same\r\n            for (const observer of Parameters.tileChangeObservers) {\r\n                observer(image);\r\n            }\r\n            callRedrawObservers();\r\n        }\r\n    };\r\n\r\n    Page.FileControl.addUploadObserver(controlId.TILE_UPLOAD_BUTTON, (filesList: FileList) => {\r\n        Page.Select.setValue(controlId.TILE_PRESET_SELECT, null);\r\n        parseImageUpload(filesList, onNewTileTexture.bind(null, null));\r\n    });\r\n\r\n    const onTilePresetChange = () => {\r\n        const preset = Page.Select.getValue(controlId.TILE_PRESET_SELECT);\r\n        if (preset) {\r\n            Page.FileControl.clearFileUpload(controlId.TILE_UPLOAD_BUTTON);\r\n            loadImage(`resources/tiles/${preset}`, onNewTileTexture.bind(null, preset));\r\n        }\r\n    };\r\n    Page.Select.addObserver(controlId.TILE_PRESET_SELECT, onTilePresetChange);\r\n    onTilePresetChange();\r\n}\r\nPage.Range.addObserver(controlId.TILE_NOISE_RESOLUTION, callRecomputeNoiseTileObservers);\r\nPage.Checkbox.addObserver(controlId.TILE_NOISE_SQUARE, callRecomputeNoiseTileObservers);\r\nPage.Checkbox.addObserver(controlId.TILE_NOISE_COLORED, callRecomputeNoiseTileObservers);\r\n\r\n\r\n{\r\n    const updateStripesControlsVisibility = () => {\r\n        const isAdaptativeMode = Parameters.stripesMode === EStripesMode.ADAPTATIVE;\r\n        Page.Controls.setVisibility(controlId.STRIPES_COUNT_RANGE, !isAdaptativeMode);\r\n        Page.Controls.setVisibility(controlId.STRIPES_WIDTH_RANGE, isAdaptativeMode);\r\n    };\r\n    const onStripesChange = () => {\r\n        updateStripesControlsVisibility();\r\n        callRedrawObservers();\r\n    };\r\n    Page.Tabs.addObserver(controlId.STRIPES_MODE_TABS, onStripesChange);\r\n    Page.Range.addObserver(controlId.STRIPES_COUNT_RANGE, onStripesChange);\r\n    Page.Range.addObserver(controlId.STRIPES_WIDTH_RANGE, onStripesChange);\r\n    updateStripesControlsVisibility();\r\n}\r\n\r\n\r\nPage.FileControl.addDownloadObserver(controlId.IMAGE_DOWNLOAD, () => {\r\n    callObservers(Parameters.imageDownloadObservers);\r\n});\r\n\r\n\r\nfunction updateIndicatorsVisibility(): void {\r\n    Page.Canvas.setIndicatorsVisibility(Page.Checkbox.isChecked(controlId.SHOW_INDICATORS_CHECKBOX));\r\n}\r\nPage.Checkbox.addObserver(controlId.SHOW_INDICATORS_CHECKBOX, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\nupdateControlsVisibility();\r\n\r\nexport {\r\n    EHeightmapMode,\r\n    EStripesMode,\r\n    ETileMode,\r\n    Parameters,\r\n};\r\n\r\n","import { gl } from \"./gl-utils/gl-canvas\";\r\nimport { Shader } from \"./gl-utils/shader\";\r\n\r\nimport { asyncLoadObjModel, ObjModel } from \"./obj-model\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { RenderToTextureWithDepth } from \"./texture/render-to-texture-with-depth\";\r\nimport { asyncLoadShader } from \"./utils\";\r\n\r\n\r\ninterface IScenePreset {\r\n    modelName: string;\r\n    cameraPosition: [number, number, number];\r\n    nearPlane: number;\r\n    farPlane: number;\r\n    model?: ObjModel; // \"undefined\" if not loaded, null if loading, ObjModel if loaded\r\n}\r\n\r\nconst presets: { [id: string]: IScenePreset } = {\r\n    \"primitives\": {\r\n        modelName: \"primitives.obj\",\r\n        cameraPosition: [-1.3, 0, -0.54],\r\n        nearPlane: 0.6,\r\n        farPlane: 2.2,\r\n    },\r\n    \"cube\": {\r\n        modelName: \"cube.obj\",\r\n        cameraPosition: [-2, 0, -1],\r\n        nearPlane: 1.3,\r\n        farPlane: 3,\r\n    },\r\n    \"monkey\": {\r\n        modelName: \"monkey.obj\",\r\n        cameraPosition: [-1.3, 0, -0.5],\r\n        nearPlane: 0.7,\r\n        farPlane: 2,\r\n    },\r\n    \"bunny\": {\r\n        modelName: \"bunny.obj\",\r\n        cameraPosition: [-1.7, 0, -0.8],\r\n        nearPlane: 0.9,\r\n        farPlane: 2.3,\r\n    },\r\n    \"atomium\": {\r\n        modelName: \"atomium.obj\",\r\n        cameraPosition: [-2.5, 0, -0.6],\r\n        nearPlane: 1.5,\r\n        farPlane: 3.4,\r\n    }\r\n};\r\n\r\ndeclare const mat4: any;\r\n\r\nclass Scene {\r\n    private readonly _depthMap: RenderToTextureWithDepth;\r\n\r\n    private readonly modelMatrix: any;\r\n    private readonly viewMatrix: any;\r\n    private readonly projectionMatrix: any;\r\n    private readonly mvMatrix: any;\r\n    private readonly mvpMatrix: any;\r\n\r\n    private shader: Shader;\r\n\r\n    public constructor() {\r\n        this._depthMap = new RenderToTextureWithDepth();\r\n\r\n        this.modelMatrix = mat4.create();\r\n        this.viewMatrix = mat4.create();\r\n        this.projectionMatrix = mat4.create();\r\n        this.mvMatrix = mat4.create();\r\n        this.mvpMatrix = mat4.create();\r\n\r\n        asyncLoadShader(\"scene\", \"scene.vert\", \"scene.frag\", (shader: Shader) => {\r\n            shader.u[\"uMVPMatrix\"].value = this.mvpMatrix;\r\n            this.shader = shader;\r\n        });\r\n    }\r\n\r\n    public computeDepthMap(width: number, height: number): void {\r\n        if (this.shader) {\r\n            const modelPreset = presets[Parameters.modelId];\r\n\r\n            mat4.lookAt(this.viewMatrix, modelPreset.cameraPosition, [0, 0, 0], [0, 0, 1]);\r\n\r\n            mat4.fromRotation(this.modelMatrix, 0.0005 * performance.now(), [0, 0, 1]);\r\n            mat4.multiply(this.mvMatrix, this.viewMatrix, this.modelMatrix);\r\n\r\n            mat4.perspective(this.projectionMatrix, 45, width / height, modelPreset.nearPlane, modelPreset.farPlane);\r\n            mat4.multiply(this.mvpMatrix, this.projectionMatrix, this.mvMatrix);\r\n\r\n            this._depthMap.reserveSpace(width, height);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._depthMap.framebuffer);\r\n            gl.viewport(0, 0, this._depthMap.width, this._depthMap.height);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // tslint:disable-line:no-bitwise\r\n\r\n            if (typeof modelPreset.model === \"undefined\") {\r\n                modelPreset.model = null;\r\n                const loadedModelId = Parameters.modelId;\r\n                asyncLoadObjModel(modelPreset.modelName, (model: ObjModel) => {\r\n                    if (loadedModelId === Parameters.modelId) { // this method is called asynchronously, so check that this is still the model we want\r\n                        modelPreset.model = model;\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (modelPreset.model) {\r\n                const model = modelPreset.model;\r\n\r\n                this.shader.a[\"aVertice\"].VBO = model.VBO;\r\n                this.shader.use();\r\n                this.shader.bindUniformsAndAttributes();\r\n\r\n                gl.drawArrays(gl.TRIANGLES, 0, 3 * model.trianglesCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get depthMap(): RenderToTextureWithDepth {\r\n        return this._depthMap;\r\n    }\r\n}\r\n\r\nexport {\r\n    Scene,\r\n};\r\n\r\n","import { Shader } from \"./gl-utils/shader\";\r\n\r\nimport { asyncLoadShader } from \"./utils\";\r\n\r\n\r\ntype IShaderCollection = { [stripesCount: number]: Shader | null };\r\n\r\nconst shadersCollection: IShaderCollection = {};\r\n\r\nfunction getShader(stripesCount: number): Shader | null {\r\n    if (shadersCollection[stripesCount]) {\r\n        return shadersCollection[stripesCount];\r\n    } else if (typeof shadersCollection[stripesCount] === \"undefined\") { // not loaded yet\r\n        shadersCollection[stripesCount] = null; // register it as \"loading\"\r\n\r\n        asyncLoadShader(\"stereomap\", \"fullscreen.vert\", \"stereogram.frag\", (loadedShader: Shader) => {\r\n            shadersCollection[stripesCount] = loadedShader;\r\n        }, {\r\n            STRIPES_COUNT: stripesCount.toFixed(1),\r\n            LOOP_SIZE: Math.ceil(2 * stripesCount).toFixed(0),\r\n        });\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport {\r\n    getShader,\r\n};\r\n\r\n","import { gl } from \"../gl-utils/gl-canvas\";\r\n\r\nimport { createImageData } from \"../utils\";\r\nimport { ITexture } from \"./i-texture\";\r\n\r\n\r\nconst defaultImageData = createImageData(1, 1, new Uint8ClampedArray([0, 0, 0, 0]));\r\n\r\nclass ImageTexture implements ITexture {\r\n    public readonly id: WebGLTexture;\r\n\r\n    private _width: number = -1;\r\n    private _height: number = -1;\r\n\r\n    public constructor() {\r\n        this.id = gl.createTexture();\r\n\r\n        this.uploadToGPU(defaultImageData);\r\n    }\r\n\r\n    public uploadToGPU(image: HTMLImageElement | ImageData): void {\r\n        this._width = image.width;\r\n        this._height = image.height;\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n}\r\n\r\nexport {\r\n    ImageTexture,\r\n};\r\n\r\n","import { gl } from \"../gl-utils/gl-canvas\";\r\n\r\nimport { RenderToTexture } from \"./render-to-texture\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\n\r\nclass RenderToTextureWithDepth extends RenderToTexture {\r\n    private readonly depthTexture: WebGLTexture;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        const extension = gl.getExtension(\"WEBGL_depth_texture\");\r\n        if (extension) {\r\n            this.depthTexture = gl.createTexture();\r\n        } else {\r\n            Page.Demopage.setErrorMessage(\"WEBGL_depth_texture-unavailable\", \"WebGL extension 'WEBGL_depth_texture' is not available.\");\r\n        }\r\n    }\r\n\r\n    protected reserveSpaceInternal(): void {\r\n        super.reserveSpaceInternal();\r\n\r\n        if (this.depthTexture) {\r\n            gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture, 0);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    RenderToTextureWithDepth,\r\n};\r\n\r\n","import { gl } from \"../gl-utils/gl-canvas\";\r\n\r\nimport { ITexture } from \"./i-texture\";\r\n\r\n\r\nclass RenderToTexture implements ITexture {\r\n    public readonly texture: WebGLTexture;\r\n    public readonly framebuffer: WebGLFramebuffer;\r\n\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    public constructor() {\r\n        this.texture = gl.createTexture();\r\n        this.framebuffer = gl.createFramebuffer();\r\n        this._width = -1;\r\n        this._height = -1;\r\n    }\r\n\r\n    public reserveSpace(wantedWidth: number, wantedHeight: number): void {\r\n        wantedWidth = Math.ceil(wantedWidth);\r\n        wantedHeight = Math.ceil(wantedHeight);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            this._width = wantedWidth;\r\n            this._height = wantedHeight;\r\n            this.reserveSpaceInternal();\r\n        }\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    public get id(): WebGLTexture {\r\n        return this.texture;\r\n    }\r\n\r\n    protected reserveSpaceInternal(): void {\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n\r\n        const format = gl.RGBA;\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, format, this._width, this._height, 0, format, gl.UNSIGNED_BYTE, null);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n}\r\n\r\nexport {\r\n    RenderToTexture,\r\n};\r\n\r\n","import { ETileMode, Parameters } from \"./parameters\";\r\nimport { ImageTexture } from \"./texture/image-texture\";\r\nimport { createImageData } from \"./utils\";\r\n\r\n\r\ninterface ITileTexture {\r\n    texture: ImageTexture;\r\n    padding: number;\r\n}\r\n\r\nclass Tile {\r\n    private readonly tileTexture: ImageTexture;\r\n\r\n    private readonly randomTexture: ImageTexture;\r\n\r\n    public constructor() {\r\n        this.tileTexture = new ImageTexture();\r\n\r\n        Parameters.tileChangeObservers.push((image: HTMLImageElement) => {\r\n            this.tileTexture.uploadToGPU(image);\r\n        });\r\n\r\n        this.randomTexture = new ImageTexture();\r\n    }\r\n\r\n    public get current(): ITileTexture {\r\n        if (Parameters.tileMode === ETileMode.TEXTURE) {\r\n            return {\r\n                texture: this.tileTexture,\r\n                padding: 0,\r\n            };\r\n        } else {\r\n            return {\r\n                texture: this.randomTexture,\r\n                padding: 1,\r\n            };\r\n        }\r\n    }\r\n\r\n    public randomize(width: number, height: number): boolean {\r\n        const usefulWidth = width;\r\n        const usefulHeight = height;\r\n        width += 2; // add padding for seamless linear interpolation\r\n        height += 2;\r\n\r\n        const data = new Uint8ClampedArray(width * height * 4);\r\n\r\n        function computePaddingTexel(x: number, y: number): void {\r\n            const originalX = (((x - 1) + usefulWidth) % usefulWidth) + 1;\r\n            const originalY = (((y - 1) + usefulHeight) % usefulHeight) + 1;\r\n            const targetTexelStart = 4 * (x + width * y);\r\n            const originalTexelStart = 4 * (originalX + width * originalY);\r\n            for (let i = 0; i < 4; i++) {\r\n                data[targetTexelStart + i] = data[originalTexelStart + i];\r\n            }\r\n        }\r\n\r\n        // compute actual texture\r\n        for (let iY = 1; iY < height - 1; iY++) {\r\n            for (let iX = 1; iX < width - 1; iX++) {\r\n                const texelStart = 4 * (iX + width * iY);\r\n                data[texelStart + 0] = Math.floor(255.9 * Math.random());\r\n                data[texelStart + 1] = Math.floor(255.9 * Math.random());\r\n                data[texelStart + 2] = Math.floor(255.9 * Math.random());\r\n                data[texelStart + 3] = 255;\r\n            }\r\n        }\r\n\r\n        // add padding\r\n        for (let iX = 0; iX < width; iX++) {\r\n            computePaddingTexel(iX, 0);\r\n            computePaddingTexel(iX, height - 1);\r\n        }\r\n\r\n        for (let iY = 0; iY < height; iY++) {\r\n            computePaddingTexel(0, iY);\r\n            computePaddingTexel(width - 1, iY);\r\n        }\r\n\r\n        const imageData = createImageData(width, height, data);\r\n        this.randomTexture.uploadToGPU(imageData);\r\n        return true;\r\n    }\r\n}\r\n\r\nexport {\r\n    Tile,\r\n};\r\n\r\n","import { Shader } from \"./gl-utils/shader\";\r\nimport * as ShaderManager from \"./gl-utils/shader-manager\";\r\n\r\nimport * as Loader from \"./loader\";\r\n\r\n\r\nfunction asyncLoadShader(name: string, vertexFilename: string, fragmentFilename: string, callback: (shader: Shader) => unknown, injected: any = {}): void {\r\n    const id = `shader-${name}`;\r\n    Loader.registerLoadingObject(id);\r\n\r\n    ShaderManager.buildShader({\r\n        fragmentFilename,\r\n        vertexFilename,\r\n        injected,\r\n    }, (builtShader: Shader | null) => {\r\n        Loader.registerLoadedObject(id);\r\n\r\n        if (builtShader !== null) {\r\n            callback(builtShader);\r\n        } else {\r\n            Page.Demopage.setErrorMessage(`${name}-shader-error`, `Failed to build '${name}' shader.`);\r\n        }\r\n    });\r\n}\r\n\r\nlet hiddenCanvas: HTMLCanvasElement;\r\nlet hiddenCanvasContext: CanvasRenderingContext2D;\r\n\r\nfunction createImageData(width: number, height: number, data: Uint8ClampedArray): ImageData {\r\n    if (data.length !== width * height * 4) {\r\n        throw new Error(`Incoherent image data: width=${width} height=${height} data.length=${data.length}`);\r\n    }\r\n\r\n    try {\r\n        return new ImageData(data, width, height);\r\n    } catch {\r\n        console.log(\"Failed to create default ImageData from constructor, using Canvas2D instead...\");\r\n\r\n        if (!hiddenCanvas) {\r\n            hiddenCanvas = document.createElement(\"canvas\");\r\n            hiddenCanvasContext = hiddenCanvas.getContext(\"2d\");\r\n        }\r\n\r\n        const result = hiddenCanvasContext.createImageData(width, height);\r\n        for (let i = 0; i < result.data.length; i++) {\r\n            result.data[i] = data[i];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction clamp(min: number, max: number, x: number): number {\r\n    if (x < min) {\r\n        return min;\r\n    } else if (x > max) {\r\n        return max;\r\n    }\r\n    return x;\r\n}\r\n\r\nexport {\r\n    asyncLoadShader,\r\n    clamp,\r\n    createImageData,\r\n};\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(633);\n"],"names":["this","fullscreenVBO","VBO","createQuad","gl","asyncLoadShader","shader","heightmapShader","draw","heightmap","tile","currentTile","current","heightmapTexture","stripesCount","computeIdealStripeCount","usefulStripesProportion","heightmapHScaling","Parameters","showHeightmap","StereogramShader","getShader","tileUsefulWidth","texture","width","padding","tileUsefulHeight","height","tileHeight","canvas","u","value","id","tileMode","ETileMode","NOISE","noiseTileColored","showUV","bindFramebuffer","FRAMEBUFFER","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","a","invertHeightmap","depth","canvasAspectRatio","heightmapAspectRatio","use","bindUniformsAndAttributes","drawArrays","TRIANGLE_STRIP","stripesMode","EStripesMode","ADAPTATIVE","idealCount","Math","round","stripesWidth","clamp","Engine","MIN_STRIPES_COUNT","MAX_STRIPES_COUNT","initGL","flags","setError","message","Page","Demopage","setErrorMessage","Canvas","getCanvas","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","adjustSize","hidpi","cssPixel","window","devicePixelRatio","floor","clientWidth","clientHeight","_gl","GLResource","cachedShaders","buildShader","infos","callback","sourcesPending","sourcesFailed","loadedSource","success","processSource","source","replace","match","name","injected","vert","ShaderSources","getSource","vertexFilename","frag","fragmentFilename","processedVert","processedFrag","Shader","loadSource","registerShader","callAndClearCallbacks","cached","callbacks","cachedCallback","failed","pending","builtShader","push","deleteShader","freeGLResources","cachedSources","filename","text","url","version","XMLHttpRequest","open","onload","readyState","status","responseText","console","error","statusText","onerror","send","notImplemented","alert","types","str","binder","location","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","log","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","useProgram","bindUniforms","currTextureUnitNb","Object","keys","forEach","uName","uniform","loc","bindAttributes","aName","attribute","bind","ACTIVE_UNIFORMS","i","getActiveUniform","getUniformLocation","size","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","Usage","array","staticUsage","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","DYNAMIC_DRAW","normalize","stride","offset","usage","STATIC","DYNAMIC","minX","minY","maxX","maxY","Float32Array","FLOAT","deleteBuffer","enableVertexAttribArray","vertexAttribPointer","setData","ImageTexture","scene","Scene","heightmapChangeObservers","image","uploadToGPU","heightmapMode","EHeightmapMode","MOVING","computeDepthMap","depthMap","Heightmap","loadingObjects","registerLoadingObject","length","showLoader","registerLoadedObject","GLCanvas","alpha","antialias","stencil","preserveDrawingBuffer","enable","STENCIL_TEST","engine","Tile","nbFramesSinceLastUpdate","setInterval","setIndicatorText","toFixed","needToDownload","imageDownloadObservers","needToRedraw","redrawObservers","needToRecomputeNoiseTile","recomputeNoiseTileObservers","mainLoop","msToBlob","blob","navigator","msSaveBlob","toBlob","link","document","createElement","download","href","URL","createObjectURL","click","noiseTileResolution","noiseTileSquare","randomize","requestAnimationFrame","main","data","Error","trianglesCount","parse","input","lines","split","vertices","geometry","line","trim","lineItems","command","x","parseFloat","y","z","iV","indices","indice","ObjModel","modelsCache","asyncLoadObjModel","Loader","addEventListener","controlId","TILE_MODE_TABS","TILE_PRESET_SELECT","TILE_NOISE_RESOLUTION","TILE_NOISE_SQUARE","TILE_NOISE_COLORED","SHOW_UV","TILE_UPLOAD_BUTTON","HEIGHTMAP_MODE_TABS","HEIGHTMAP_PRESET_SELECT","MODEL_PRESET_SELECT","DEPTH_RANGE","HEIGHTMAP_INVERT_CHECKBOX","SHOW_HEIGHTMAP","HEIGHTMAP_UPLOAD_BUTTON","STRIPES_MODE_TABS","STRIPES_WIDTH_RANGE","STRIPES_COUNT_RANGE","SHOW_INDICATORS_CHECKBOX","IMAGE_DOWNLOAD","callObservers","observers","observer","callRedrawObservers","callRecomputeNoiseTileObservers","Tabs","getValues","Range","getValue","Checkbox","isChecked","Select","tileChangeObservers","parseImageUpload","filesList","FileReader","Image","src","result","readAsDataURL","loadImage","updateControlsVisibility","isTileNoiseMode","Controls","setVisibility","isMovingMode","Observers","canvasResize","addObserver","setValues","clearStoredState","onlyIfPresetIs","FileControl","addUploadObserver","setValue","onHeightmapPresetChange","preset","clearFileUpload","onTilePresetChange","isAdaptativeMode","onStripesChange","updateIndicatorsVisibility","setIndicatorsVisibility","addDownloadObserver","presets","modelName","cameraPosition","nearPlane","farPlane","_depthMap","RenderToTextureWithDepth","modelMatrix","mat4","create","viewMatrix","projectionMatrix","mvMatrix","mvpMatrix","modelId","lookAt","fromRotation","performance","now","multiply","perspective","reserveSpace","framebuffer","model","TRIANGLES","shadersCollection","loadedShader","STRIPES_COUNT","LOOP_SIZE","ceil","defaultImageData","createImageData","Uint8ClampedArray","_width","_height","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","getExtension","depthTexture","reserveSpaceInternal","DEPTH_COMPONENT","UNSIGNED_SHORT","NEAREST","framebufferTexture2D","DEPTH_ATTACHMENT","RenderToTexture","createFramebuffer","wantedWidth","wantedHeight","format","COLOR_ATTACHMENT0","tileTexture","randomTexture","TEXTURE","usefulWidth","usefulHeight","computePaddingTexel","targetTexelStart","originalTexelStart","iY","iX","texelStart","random","imageData","hiddenCanvas","hiddenCanvasContext","ShaderManager","ImageData","min","max","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"sourceRoot":""}